["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dnd-cjs/lib/utils/cloneWithRef.js"],"~:js","shadow$provide.module$node_modules$react_dnd_cjs$lib$utils$cloneWithRef=function(global,require,module,exports){global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod}};Object.defineProperty(exports,\"__esModule\",{value:!0});var react_1=require(\"module$node_modules$react$index\"),invariant_1=global(require(\"module$node_modules$invariant$browser\"));exports.cloneWithRef=function(element,newRef){var previousRef=element.ref;invariant_1.default(\"string\"!==typeof previousRef,\n\"Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a \\x3cspan\\x3e or \\x3cdiv\\x3e. Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\");return previousRef?react_1.cloneElement(element,{ref:function(node){\"function\"===typeof previousRef?previousRef(node):previousRef.current=node;\"function\"===typeof newRef?newRef(node):newRef.current=node}}):react_1.cloneElement(element,{ref:newRef})}}","~:source","shadow$provide[\"module$node_modules$react_dnd_cjs$lib$utils$cloneWithRef\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar invariant_1 = __importDefault(require(\"invariant\"));\nfunction setRef(ref, node) {\n    if (typeof ref === 'function') {\n        ref(node);\n    }\n    else {\n        ref.current = node;\n    }\n}\nfunction cloneWithRef(element, newRef) {\n    var previousRef = element.ref;\n    invariant_1.default(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' +\n        'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' +\n        'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n    if (!previousRef) {\n        // When there is no ref on the element, use the new ref directly\n        return react_1.cloneElement(element, {\n            ref: newRef,\n        });\n    }\n    else {\n        return react_1.cloneElement(element, {\n            ref: function (node) {\n                setRef(previousRef, node);\n                setRef(newRef, node);\n            },\n        });\n    }\n}\nexports.cloneWithRef = cloneWithRef;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$invariant$browser","~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","value","current","ref","cloneWithRef"]],"~:compiled-at",1589100101375,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dnd_cjs$lib$utils$cloneWithRef.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEjHC,MAAAA,CAAmB,IAAnBA,EAA2B,IAAAA,gBAA3BA,EAAoD,QAAS,CAACC,GAAD,CAAM,CACnE,MAAQA,IAAD,EAAQA,GAAAC,WAAR,CAA0BD,GAA1B,CAAgC,CAAE,UAAWA,GAAb,CAD4B,CAGvEE,OAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAAEM,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,QAAUT,OAAA,CAAQ,iCAAR,CAAd,CACIU,YAAcP,MAAA,CAAgBH,OAAA,CAAQ,uCAAR,CAAhB,CA6BlBE,QAAAS,aAAA,CApBAA,QAAqB,CAACC,OAAD,CAAUC,MAAV,CAAkB,CACnC,IAAIC,YAAcF,OAAAG,IAClBL,YAAAM,QAAA,CAA2C,QAA3C,GAAoB,MAAOF,YAA3B;AAAqD,sQAArD,CAGA,OAAKA,YAAL,CAOWL,OAAAQ,aAAA,CAAqBL,OAArB,CAA8B,CACjCG,IAAKA,QAAS,CAACG,IAAD,CAAO,CApBV,UAAnB,GAAI,MAqBeJ,YArBnB,CAqBmBA,WApBf,CAoB4BI,IApB5B,CADJ,CAqBmBJ,WAjBfK,QAJJ,CAqBgCD,IArBb,WAAnB,GAAI,MAsBeL,OAtBnB,CAsBmBA,MArBf,CAqBuBK,IArBvB,CADJ,CAsBmBL,MAlBfM,QAJJ,CAsB2BD,IAFE,CADY,CAA9B,CAPX,CAEWT,OAAAQ,aAAA,CAAqBL,OAArB,CAA8B,CACjCG,IAAKF,MAD4B,CAA9B,CAPwB,CAhB8E;\",\n\"sources\":[\"node_modules/react-dnd-cjs/lib/utils/cloneWithRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dnd_cjs$lib$utils$cloneWithRef\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __importDefault = (this && this.__importDefault) || function (mod) {\\n    return (mod && mod.__esModule) ? mod : { \\\"default\\\": mod };\\n};\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar react_1 = require(\\\"react\\\");\\nvar invariant_1 = __importDefault(require(\\\"invariant\\\"));\\nfunction setRef(ref, node) {\\n    if (typeof ref === 'function') {\\n        ref(node);\\n    }\\n    else {\\n        ref.current = node;\\n    }\\n}\\nfunction cloneWithRef(element, newRef) {\\n    var previousRef = element.ref;\\n    invariant_1.default(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' +\\n        'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' +\\n        'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\\n    if (!previousRef) {\\n        // When there is no ref on the element, use the new ref directly\\n        return react_1.cloneElement(element, {\\n            ref: newRef,\\n        });\\n    }\\n    else {\\n        return react_1.cloneElement(element, {\\n            ref: function (node) {\\n                setRef(previousRef, node);\\n                setRef(newRef, node);\\n            },\\n        });\\n    }\\n}\\nexports.cloneWithRef = cloneWithRef;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__importDefault\",\"mod\",\"__esModule\",\"Object\",\"defineProperty\",\"value\",\"react_1\",\"invariant_1\",\"cloneWithRef\",\"element\",\"newRef\",\"previousRef\",\"ref\",\"default\",\"cloneElement\",\"node\",\"current\"]\n}\n"]