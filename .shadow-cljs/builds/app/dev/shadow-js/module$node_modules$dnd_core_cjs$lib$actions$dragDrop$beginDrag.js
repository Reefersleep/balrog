["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/dnd-core-cjs/lib/actions/dragDrop/beginDrag.js"],"~:js","shadow$provide.module$node_modules$dnd_core_cjs$lib$actions$dragDrop$beginDrag=function(global,require,module,exports){function verifyInvariants(sourceIds,monitor,registry){invariant_1.default(!monitor.isDragging(),\"Cannot call beginDrag while dragging.\");sourceIds.forEach(function(sourceId){invariant_1.default(registry.getSource(sourceId),\"Expected sourceIds to be registered.\")})}global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod}};Object.defineProperty(exports,\n\"__esModule\",{value:!0});var invariant_1=global(require(\"module$node_modules$invariant$browser\")),setClientOffset_1=require(\"module$node_modules$dnd_core_cjs$lib$actions$dragDrop$local$setClientOffset\"),js_utils_1=require(\"module$node_modules$dnd_core_cjs$lib$utils$js_utils\"),types_1=require(\"module$node_modules$dnd_core_cjs$lib$actions$dragDrop$types\"),ResetCoordinatesAction={type:types_1.INIT_COORDS,payload:{clientOffset:null,sourceClientOffset:null}};exports.default=function(manager){return function(sourceIds,\noptions){void 0===sourceIds&&(sourceIds=[]);void 0===options&&(options={publishSource:!0});var _a=options.publishSource;_a=void 0===_a?!0:_a;var clientOffset=options.clientOffset,getSourceClientOffset=options.getSourceClientOffset,monitor=manager.getMonitor();options=manager.getRegistry();manager.dispatch(setClientOffset_1.setClientOffset(clientOffset));verifyInvariants(sourceIds,monitor,options);for(var sourceId=null,i=sourceIds.length-1;0<=i;i--)if(monitor.canDragSource(sourceIds[i])){sourceId=\nsourceIds[i];break}sourceIds=sourceId;if(null===sourceIds)manager.dispatch(ResetCoordinatesAction);else return sourceId=null,clientOffset&&(invariant_1.default(\"function\"===typeof getSourceClientOffset,\"When clientOffset is provided, getSourceClientOffset must be a function.\"),sourceId=getSourceClientOffset(sourceIds)),manager.dispatch(setClientOffset_1.setClientOffset(clientOffset,sourceId)),getSourceClientOffset=options.getSource(sourceIds).beginDrag(monitor,sourceIds),invariant_1.default(js_utils_1.isObject(getSourceClientOffset),\n\"Item must be an object.\"),options.pinSource(sourceIds),options=options.getSourceType(sourceIds),{type:types_1.BEGIN_DRAG,payload:{itemType:options,item:getSourceClientOffset,sourceId:sourceIds,clientOffset:clientOffset||null,sourceClientOffset:sourceId||null,isSourcePublic:!!_a}}}}}","~:source","shadow$provide[\"module$node_modules$dnd_core_cjs$lib$actions$dragDrop$beginDrag\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = __importDefault(require(\"invariant\"));\nvar setClientOffset_1 = require(\"./local/setClientOffset\");\nvar js_utils_1 = require(\"../../utils/js_utils\");\nvar types_1 = require(\"./types\");\nvar ResetCoordinatesAction = {\n    type: types_1.INIT_COORDS,\n    payload: {\n        clientOffset: null,\n        sourceClientOffset: null,\n    },\n};\nfunction createBeginDrag(manager) {\n    return function beginDrag(sourceIds, options) {\n        if (sourceIds === void 0) { sourceIds = []; }\n        if (options === void 0) { options = {\n            publishSource: true,\n        }; }\n        var _a = options.publishSource, publishSource = _a === void 0 ? true : _a, clientOffset = options.clientOffset, getSourceClientOffset = options.getSourceClientOffset;\n        var monitor = manager.getMonitor();\n        var registry = manager.getRegistry();\n        // Initialize the coordinates using the client offset\n        manager.dispatch(setClientOffset_1.setClientOffset(clientOffset));\n        verifyInvariants(sourceIds, monitor, registry);\n        // Get the draggable source\n        var sourceId = getDraggableSource(sourceIds, monitor);\n        if (sourceId === null) {\n            manager.dispatch(ResetCoordinatesAction);\n            return;\n        }\n        // Get the source client offset\n        var sourceClientOffset = null;\n        if (clientOffset) {\n            verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n            sourceClientOffset = getSourceClientOffset(sourceId);\n        }\n        // Initialize the full coordinates\n        manager.dispatch(setClientOffset_1.setClientOffset(clientOffset, sourceClientOffset));\n        var source = registry.getSource(sourceId);\n        var item = source.beginDrag(monitor, sourceId);\n        verifyItemIsObject(item);\n        registry.pinSource(sourceId);\n        var itemType = registry.getSourceType(sourceId);\n        return {\n            type: types_1.BEGIN_DRAG,\n            payload: {\n                itemType: itemType,\n                item: item,\n                sourceId: sourceId,\n                clientOffset: clientOffset || null,\n                sourceClientOffset: sourceClientOffset || null,\n                isSourcePublic: !!publishSource,\n            },\n        };\n    };\n}\nexports.default = createBeginDrag;\nfunction verifyInvariants(sourceIds, monitor, registry) {\n    invariant_1.default(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n    sourceIds.forEach(function (sourceId) {\n        invariant_1.default(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n    });\n}\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n    invariant_1.default(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\nfunction verifyItemIsObject(item) {\n    invariant_1.default(js_utils_1.isObject(item), 'Item must be an object.');\n}\nfunction getDraggableSource(sourceIds, monitor) {\n    var sourceId = null;\n    for (var i = sourceIds.length - 1; i >= 0; i--) {\n        if (monitor.canDragSource(sourceIds[i])) {\n            sourceId = sourceIds[i];\n            break;\n        }\n    }\n    return sourceId;\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$invariant$browser","~$module$node_modules$dnd_core_cjs$lib$actions$dragDrop$types","~$module$node_modules$dnd_core_cjs$lib$utils$js_utils","~$shadow.js","~$module$node_modules$dnd_core_cjs$lib$actions$dragDrop$local$setClientOffset"]],"~:properties",["^5",["clientOffset","__esModule","sourceId","isSourcePublic","sourceClientOffset","value","item","publishSource","type","itemType","payload","default"]],"~:compiled-at",1589100101317,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$dnd_core_cjs$lib$actions$dragDrop$beginDrag.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/dnd-core-cjs/lib/actions/dragDrop/beginDrag.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$dnd_core_cjs$lib$actions$dragDrop$beginDrag\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __importDefault = (this && this.__importDefault) || function (mod) {\\n    return (mod && mod.__esModule) ? mod : { \\\"default\\\": mod };\\n};\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar invariant_1 = __importDefault(require(\\\"invariant\\\"));\\nvar setClientOffset_1 = require(\\\"./local/setClientOffset\\\");\\nvar js_utils_1 = require(\\\"../../utils/js_utils\\\");\\nvar types_1 = require(\\\"./types\\\");\\nvar ResetCoordinatesAction = {\\n    type: types_1.INIT_COORDS,\\n    payload: {\\n        clientOffset: null,\\n        sourceClientOffset: null,\\n    },\\n};\\nfunction createBeginDrag(manager) {\\n    return function beginDrag(sourceIds, options) {\\n        if (sourceIds === void 0) { sourceIds = []; }\\n        if (options === void 0) { options = {\\n            publishSource: true,\\n        }; }\\n        var _a = options.publishSource, publishSource = _a === void 0 ? true : _a, clientOffset = options.clientOffset, getSourceClientOffset = options.getSourceClientOffset;\\n        var monitor = manager.getMonitor();\\n        var registry = manager.getRegistry();\\n        // Initialize the coordinates using the client offset\\n        manager.dispatch(setClientOffset_1.setClientOffset(clientOffset));\\n        verifyInvariants(sourceIds, monitor, registry);\\n        // Get the draggable source\\n        var sourceId = getDraggableSource(sourceIds, monitor);\\n        if (sourceId === null) {\\n            manager.dispatch(ResetCoordinatesAction);\\n            return;\\n        }\\n        // Get the source client offset\\n        var sourceClientOffset = null;\\n        if (clientOffset) {\\n            verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\\n            sourceClientOffset = getSourceClientOffset(sourceId);\\n        }\\n        // Initialize the full coordinates\\n        manager.dispatch(setClientOffset_1.setClientOffset(clientOffset, sourceClientOffset));\\n        var source = registry.getSource(sourceId);\\n        var item = source.beginDrag(monitor, sourceId);\\n        verifyItemIsObject(item);\\n        registry.pinSource(sourceId);\\n        var itemType = registry.getSourceType(sourceId);\\n        return {\\n            type: types_1.BEGIN_DRAG,\\n            payload: {\\n                itemType: itemType,\\n                item: item,\\n                sourceId: sourceId,\\n                clientOffset: clientOffset || null,\\n                sourceClientOffset: sourceClientOffset || null,\\n                isSourcePublic: !!publishSource,\\n            },\\n        };\\n    };\\n}\\nexports.default = createBeginDrag;\\nfunction verifyInvariants(sourceIds, monitor, registry) {\\n    invariant_1.default(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\\n    sourceIds.forEach(function (sourceId) {\\n        invariant_1.default(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\\n    });\\n}\\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\\n    invariant_1.default(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\\n}\\nfunction verifyItemIsObject(item) {\\n    invariant_1.default(js_utils_1.isObject(item), 'Item must be an object.');\\n}\\nfunction getDraggableSource(sourceIds, monitor) {\\n    var sourceId = null;\\n    for (var i = sourceIds.length - 1; i >= 0; i--) {\\n        if (monitor.canDragSource(sourceIds[i])) {\\n            sourceId = sourceIds[i];\\n            break;\\n        }\\n    }\\n    return sourceId;\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"verifyInvariants\",\"sourceIds\",\"monitor\",\"registry\",\"invariant_1\",\"default\",\"isDragging\",\"forEach\",\"sourceId\",\"getSource\",\"__importDefault\",\"mod\",\"__esModule\",\"Object\",\"defineProperty\",\"value\",\"setClientOffset_1\",\"js_utils_1\",\"types_1\",\"ResetCoordinatesAction\",\"type\",\"INIT_COORDS\",\"payload\",\"clientOffset\",\"sourceClientOffset\",\"createBeginDrag\",\"manager\",\"beginDrag\",\"options\",\"publishSource\",\"_a\",\"getSourceClientOffset\",\"getMonitor\",\"getRegistry\",\"dispatch\",\"setClientOffset\",\"i\",\"length\",\"canDragSource\",\"item\",\"source\",\"isObject\",\"pinSource\",\"itemType\",\"getSourceType\",\"BEGIN_DRAG\",\"isSourcePublic\"]\n}\n"]