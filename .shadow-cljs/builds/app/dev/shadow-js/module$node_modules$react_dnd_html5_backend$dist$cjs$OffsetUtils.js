["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-dnd-html5-backend/dist/cjs/OffsetUtils.js"],"~:js","shadow$provide.module$node_modules$react_dnd_html5_backend$dist$cjs$OffsetUtils=function(global,require,module,exports){function getNodeClientOffset(node){node=node.nodeType===ELEMENT_NODE?node:node.parentElement;if(!node)return null;node=node.getBoundingClientRect();return{x:node.left,y:node.top}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.getNodeClientOffset=getNodeClientOffset;exports.getEventClientOffset=function(e){return{x:e.clientX,y:e.clientY}};exports.getDragPreviewOffset=\nfunction(sourceNode,dragPreview,clientOffset,anchorPoint,offsetPoint){var isImage=\"IMG\"===dragPreview.nodeName&&((0,_BrowserDetector.isFirefox)()||!document.documentElement.contains(dragPreview));var dragPreviewNodeOffsetFromClient=getNodeClientOffset(isImage?sourceNode:dragPreview),JSCompiler_object_inline_x_19=clientOffset.x-dragPreviewNodeOffsetFromClient.x;clientOffset=clientOffset.y-dragPreviewNodeOffsetFromClient.y;dragPreviewNodeOffsetFromClient=sourceNode.offsetWidth;sourceNode=sourceNode.offsetHeight;\nvar anchorX=anchorPoint.anchorX;anchorPoint=anchorPoint.anchorY;var JSCompiler_object_inline_dragPreviewWidth_34=isImage?dragPreview.width:dragPreviewNodeOffsetFromClient;dragPreview=isImage?dragPreview.height:sourceNode;(0,_BrowserDetector.isSafari)()&&isImage&&(dragPreview/=window.devicePixelRatio,JSCompiler_object_inline_dragPreviewWidth_34/=window.devicePixelRatio);var offsetX=offsetPoint.offsetX;offsetPoint=offsetPoint.offsetY;var isManualOffsetY=0===offsetPoint||offsetPoint;JSCompiler_object_inline_x_19=\n0===offsetX||offsetX?offsetX:(new _MonotonicInterpolant.default([0,.5,1],[JSCompiler_object_inline_x_19,JSCompiler_object_inline_x_19/dragPreviewNodeOffsetFromClient*JSCompiler_object_inline_dragPreviewWidth_34,JSCompiler_object_inline_x_19+JSCompiler_object_inline_dragPreviewWidth_34-dragPreviewNodeOffsetFromClient])).interpolate(anchorX);isManualOffsetY?isImage=offsetPoint:(clientOffset=(new _MonotonicInterpolant.default([0,.5,1],[clientOffset,clientOffset/sourceNode*dragPreview,clientOffset+dragPreview-\nsourceNode])).interpolate(anchorPoint),(0,_BrowserDetector.isSafari)()&&isImage&&(clientOffset+=(window.devicePixelRatio-1)*dragPreview),isImage=clientOffset);return{x:JSCompiler_object_inline_x_19,y:isImage}};var _BrowserDetector=require(\"module$node_modules$react_dnd_html5_backend$dist$cjs$BrowserDetector\"),_MonotonicInterpolant=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$react_dnd_html5_backend$dist$cjs$MonotonicInterpolant\")),ELEMENT_NODE=1}","~:source","shadow$provide[\"module$node_modules$react_dnd_html5_backend$dist$cjs$OffsetUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNodeClientOffset = getNodeClientOffset;\nexports.getEventClientOffset = getEventClientOffset;\nexports.getDragPreviewOffset = getDragPreviewOffset;\n\nvar _BrowserDetector = require(\"./BrowserDetector\");\n\nvar _MonotonicInterpolant = _interopRequireDefault(require(\"./MonotonicInterpolant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ELEMENT_NODE = 1;\n\nfunction getNodeClientOffset(node) {\n  var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;\n\n  if (!el) {\n    return null;\n  }\n\n  var _el$getBoundingClient = el.getBoundingClientRect(),\n      top = _el$getBoundingClient.top,\n      left = _el$getBoundingClient.left;\n\n  return {\n    x: left,\n    y: top\n  };\n}\n\nfunction getEventClientOffset(e) {\n  return {\n    x: e.clientX,\n    y: e.clientY\n  };\n}\n\nfunction isImageNode(node) {\n  return node.nodeName === 'IMG' && ((0, _BrowserDetector.isFirefox)() || !document.documentElement.contains(node));\n}\n\nfunction getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight) {\n  var dragPreviewWidth = isImage ? dragPreview.width : sourceWidth;\n  var dragPreviewHeight = isImage ? dragPreview.height : sourceHeight; // Work around @2x coordinate discrepancies in browsers\n\n  if ((0, _BrowserDetector.isSafari)() && isImage) {\n    dragPreviewHeight /= window.devicePixelRatio;\n    dragPreviewWidth /= window.devicePixelRatio;\n  }\n\n  return {\n    dragPreviewWidth: dragPreviewWidth,\n    dragPreviewHeight: dragPreviewHeight\n  };\n}\n\nfunction getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {\n  // The browsers will use the image intrinsic size under different conditions.\n  // Firefox only cares if it's an image, but WebKit also wants it to be detached.\n  var isImage = isImageNode(dragPreview);\n  var dragPreviewNode = isImage ? sourceNode : dragPreview;\n  var dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);\n  var offsetFromDragPreview = {\n    x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,\n    y: clientOffset.y - dragPreviewNodeOffsetFromClient.y\n  };\n  var sourceWidth = sourceNode.offsetWidth,\n      sourceHeight = sourceNode.offsetHeight;\n  var anchorX = anchorPoint.anchorX,\n      anchorY = anchorPoint.anchorY;\n\n  var _getDragPreviewSize = getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight),\n      dragPreviewWidth = _getDragPreviewSize.dragPreviewWidth,\n      dragPreviewHeight = _getDragPreviewSize.dragPreviewHeight;\n\n  var calculateYOffset = function calculateYOffset() {\n    var interpolantY = new _MonotonicInterpolant.default([0, 0.5, 1], [// Dock to the top\n    offsetFromDragPreview.y, // Align at the center\n    offsetFromDragPreview.y / sourceHeight * dragPreviewHeight, // Dock to the bottom\n    offsetFromDragPreview.y + dragPreviewHeight - sourceHeight]);\n    var y = interpolantY.interpolate(anchorY); // Work around Safari 8 positioning bug\n\n    if ((0, _BrowserDetector.isSafari)() && isImage) {\n      // We'll have to wait for @3x to see if this is entirely correct\n      y += (window.devicePixelRatio - 1) * dragPreviewHeight;\n    }\n\n    return y;\n  };\n\n  var calculateXOffset = function calculateXOffset() {\n    // Interpolate coordinates depending on anchor point\n    // If you know a simpler way to do this, let me know\n    var interpolantX = new _MonotonicInterpolant.default([0, 0.5, 1], [// Dock to the left\n    offsetFromDragPreview.x, // Align at the center\n    offsetFromDragPreview.x / sourceWidth * dragPreviewWidth, // Dock to the right\n    offsetFromDragPreview.x + dragPreviewWidth - sourceWidth]);\n    return interpolantX.interpolate(anchorX);\n  }; // Force offsets if specified in the options.\n\n\n  var offsetX = offsetPoint.offsetX,\n      offsetY = offsetPoint.offsetY;\n  var isManualOffsetX = offsetX === 0 || offsetX;\n  var isManualOffsetY = offsetY === 0 || offsetY;\n  return {\n    x: isManualOffsetX ? offsetX : calculateXOffset(),\n    y: isManualOffsetY ? offsetY : calculateYOffset()\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$react_dnd_html5_backend$dist$cjs$BrowserDetector","~$module$node_modules$react_dnd_html5_backend$dist$cjs$MonotonicInterpolant"]],"~:properties",["^5",["x","__esModule","value","getEventClientOffset","getDragPreviewOffset","getNodeClientOffset","y","default"]],"~:compiled-at",1589119268720,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_dnd_html5_backend$dist$cjs$OffsetUtils.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-dnd-html5-backend/dist/cjs/OffsetUtils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_dnd_html5_backend$dist$cjs$OffsetUtils\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.getNodeClientOffset = getNodeClientOffset;\\nexports.getEventClientOffset = getEventClientOffset;\\nexports.getDragPreviewOffset = getDragPreviewOffset;\\n\\nvar _BrowserDetector = require(\\\"./BrowserDetector\\\");\\n\\nvar _MonotonicInterpolant = _interopRequireDefault(require(\\\"./MonotonicInterpolant\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar ELEMENT_NODE = 1;\\n\\nfunction getNodeClientOffset(node) {\\n  var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;\\n\\n  if (!el) {\\n    return null;\\n  }\\n\\n  var _el$getBoundingClient = el.getBoundingClientRect(),\\n      top = _el$getBoundingClient.top,\\n      left = _el$getBoundingClient.left;\\n\\n  return {\\n    x: left,\\n    y: top\\n  };\\n}\\n\\nfunction getEventClientOffset(e) {\\n  return {\\n    x: e.clientX,\\n    y: e.clientY\\n  };\\n}\\n\\nfunction isImageNode(node) {\\n  return node.nodeName === 'IMG' && ((0, _BrowserDetector.isFirefox)() || !document.documentElement.contains(node));\\n}\\n\\nfunction getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight) {\\n  var dragPreviewWidth = isImage ? dragPreview.width : sourceWidth;\\n  var dragPreviewHeight = isImage ? dragPreview.height : sourceHeight; // Work around @2x coordinate discrepancies in browsers\\n\\n  if ((0, _BrowserDetector.isSafari)() && isImage) {\\n    dragPreviewHeight /= window.devicePixelRatio;\\n    dragPreviewWidth /= window.devicePixelRatio;\\n  }\\n\\n  return {\\n    dragPreviewWidth: dragPreviewWidth,\\n    dragPreviewHeight: dragPreviewHeight\\n  };\\n}\\n\\nfunction getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {\\n  // The browsers will use the image intrinsic size under different conditions.\\n  // Firefox only cares if it's an image, but WebKit also wants it to be detached.\\n  var isImage = isImageNode(dragPreview);\\n  var dragPreviewNode = isImage ? sourceNode : dragPreview;\\n  var dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);\\n  var offsetFromDragPreview = {\\n    x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,\\n    y: clientOffset.y - dragPreviewNodeOffsetFromClient.y\\n  };\\n  var sourceWidth = sourceNode.offsetWidth,\\n      sourceHeight = sourceNode.offsetHeight;\\n  var anchorX = anchorPoint.anchorX,\\n      anchorY = anchorPoint.anchorY;\\n\\n  var _getDragPreviewSize = getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight),\\n      dragPreviewWidth = _getDragPreviewSize.dragPreviewWidth,\\n      dragPreviewHeight = _getDragPreviewSize.dragPreviewHeight;\\n\\n  var calculateYOffset = function calculateYOffset() {\\n    var interpolantY = new _MonotonicInterpolant.default([0, 0.5, 1], [// Dock to the top\\n    offsetFromDragPreview.y, // Align at the center\\n    offsetFromDragPreview.y / sourceHeight * dragPreviewHeight, // Dock to the bottom\\n    offsetFromDragPreview.y + dragPreviewHeight - sourceHeight]);\\n    var y = interpolantY.interpolate(anchorY); // Work around Safari 8 positioning bug\\n\\n    if ((0, _BrowserDetector.isSafari)() && isImage) {\\n      // We'll have to wait for @3x to see if this is entirely correct\\n      y += (window.devicePixelRatio - 1) * dragPreviewHeight;\\n    }\\n\\n    return y;\\n  };\\n\\n  var calculateXOffset = function calculateXOffset() {\\n    // Interpolate coordinates depending on anchor point\\n    // If you know a simpler way to do this, let me know\\n    var interpolantX = new _MonotonicInterpolant.default([0, 0.5, 1], [// Dock to the left\\n    offsetFromDragPreview.x, // Align at the center\\n    offsetFromDragPreview.x / sourceWidth * dragPreviewWidth, // Dock to the right\\n    offsetFromDragPreview.x + dragPreviewWidth - sourceWidth]);\\n    return interpolantX.interpolate(anchorX);\\n  }; // Force offsets if specified in the options.\\n\\n\\n  var offsetX = offsetPoint.offsetX,\\n      offsetY = offsetPoint.offsetY;\\n  var isManualOffsetX = offsetX === 0 || offsetX;\\n  var isManualOffsetY = offsetY === 0 || offsetY;\\n  return {\\n    x: isManualOffsetX ? offsetX : calculateXOffset(),\\n    y: isManualOffsetY ? offsetY : calculateYOffset()\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getNodeClientOffset\",\"node\",\"el\",\"nodeType\",\"ELEMENT_NODE\",\"parentElement\",\"_el$getBoundingClient\",\"getBoundingClientRect\",\"x\",\"left\",\"y\",\"top\",\"Object\",\"defineProperty\",\"value\",\"getEventClientOffset\",\"e\",\"clientX\",\"clientY\",\"getDragPreviewOffset\",\"sourceNode\",\"dragPreview\",\"clientOffset\",\"anchorPoint\",\"offsetPoint\",\"nodeName\",\"_BrowserDetector\",\"isFirefox\",\"document\",\"documentElement\",\"contains\",\"dragPreviewNodeOffsetFromClient\",\"isImage\",\"dragPreviewNode\",\"sourceWidth\",\"offsetWidth\",\"sourceHeight\",\"offsetHeight\",\"anchorX\",\"anchorY\",\"dragPreviewWidth\",\"width\",\"dragPreviewHeight\",\"height\",\"isSafari\",\"window\",\"devicePixelRatio\",\"offsetX\",\"offsetY\",\"isManualOffsetY\",\"interpolate\",\"interpolantX\",\"_MonotonicInterpolant\",\"default\",\"interpolantY\",\"_interopRequireDefault\",\"obj\",\"__esModule\"]\n}\n"]