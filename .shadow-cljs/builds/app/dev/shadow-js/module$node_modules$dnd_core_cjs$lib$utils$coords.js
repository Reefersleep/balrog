["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/dnd-core-cjs/lib/utils/coords.js"],"~:js","shadow$provide.module$node_modules$dnd_core_cjs$lib$utils$coords=function(global,require,module,exports){function add(a,b){return{x:a.x+b.x,y:a.y+b.y}}function subtract(a,b){return{x:a.x-b.x,y:a.y-b.y}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.add=add;exports.subtract=subtract;exports.getSourceClientOffset=function(state){var clientOffset=state.clientOffset,initialClientOffset=state.initialClientOffset;state=state.initialSourceClientOffset;return clientOffset&&initialClientOffset&&\nstate?subtract(add(clientOffset,state),initialClientOffset):null};exports.getDifferenceFromInitialOffset=function(state){var clientOffset=state.clientOffset;state=state.initialClientOffset;return clientOffset&&state?subtract(clientOffset,state):null}}","~:source","shadow$provide[\"module$node_modules$dnd_core_cjs$lib$utils$coords\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */\nfunction add(a, b) {\n    return {\n        x: a.x + b.x,\n        y: a.y + b.y,\n    };\n}\nexports.add = add;\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */\nfunction subtract(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y,\n    };\n}\nexports.subtract = subtract;\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */\nfunction getSourceClientOffset(state) {\n    var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset, initialSourceClientOffset = state.initialSourceClientOffset;\n    if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n        return null;\n    }\n    return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\n}\nexports.getSourceClientOffset = getSourceClientOffset;\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */\nfunction getDifferenceFromInitialOffset(state) {\n    var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset;\n    if (!clientOffset || !initialClientOffset) {\n        return null;\n    }\n    return subtract(clientOffset, initialClientOffset);\n}\nexports.getDifferenceFromInitialOffset = getDifferenceFromInitialOffset;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["getDifferenceFromInitialOffset","x","__esModule","value","subtract","y","getSourceClientOffset","add"]],"~:compiled-at",1589100101352,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$dnd_core_cjs$lib$utils$coords.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQ9GC,QAASA,IAAG,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACf,MAAO,CACHC,EAAGF,CAAAE,EAAHA,CAASD,CAAAC,EADN,CAEHC,EAAGH,CAAAG,EAAHA,CAASF,CAAAE,EAFN,CADQ,CAYnBC,QAASA,SAAQ,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CACpB,MAAO,CACHC,EAAGF,CAAAE,EAAHA,CAASD,CAAAC,EADN,CAEHC,EAAGH,CAAAG,EAAHA,CAASF,CAAAE,EAFN,CADa,CAlBxBE,MAAAC,eAAA,CAAsBR,OAAtB,CAA+B,YAA/B,CAA6C,CAAES,MAAO,CAAA,CAAT,CAA7C,CAYAT,QAAAC,IAAA,CAAcA,GAYdD,QAAAM,SAAA,CAAmBA,QAgBnBN,QAAAU,sBAAA,CAPAA,QAA8B,CAACC,KAAD,CAAQ,CAAA,IAC9BC,aAAeD,KAAAC,aADe,CACKC,oBAAsBF,KAAAE,oBAA2BC,MAAAA,CAA4BH,KAAAG,0BACpH,OAAKF,aAAL,EAAsBC,mBAAtB;AAA8CC,KAA9C,CAGOR,QAAA,CAASL,GAAA,CAAIW,YAAJ,CAAkBE,KAAlB,CAAT,CAAuDD,mBAAvD,CAHP,CACW,IAHuB,CAoBtCb,QAAAe,+BAAA,CAPAA,QAAuC,CAACJ,KAAD,CAAQ,CAAA,IACvCC,aAAeD,KAAAC,aAAoBC,MAAAA,CAAsBF,KAAAE,oBAC7D,OAAKD,aAAL,EAAsBC,KAAtB,CAGOP,QAAA,CAASM,YAAT,CAAuBC,KAAvB,CAHP,CACW,IAHgC,CAhD+D;\",\n\"sources\":[\"node_modules/dnd-core-cjs/lib/utils/coords.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$dnd_core_cjs$lib$utils$coords\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\n/**\\n * Coordinate addition\\n * @param a The first coordinate\\n * @param b The second coordinate\\n */\\nfunction add(a, b) {\\n    return {\\n        x: a.x + b.x,\\n        y: a.y + b.y,\\n    };\\n}\\nexports.add = add;\\n/**\\n * Coordinate subtraction\\n * @param a The first coordinate\\n * @param b The second coordinate\\n */\\nfunction subtract(a, b) {\\n    return {\\n        x: a.x - b.x,\\n        y: a.y - b.y,\\n    };\\n}\\nexports.subtract = subtract;\\n/**\\n * Returns the cartesian distance of the drag source component's position, based on its position\\n * at the time when the current drag operation has started, and the movement difference.\\n *\\n * Returns null if no item is being dragged.\\n *\\n * @param state The offset state to compute from\\n */\\nfunction getSourceClientOffset(state) {\\n    var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset, initialSourceClientOffset = state.initialSourceClientOffset;\\n    if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\\n        return null;\\n    }\\n    return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\\n}\\nexports.getSourceClientOffset = getSourceClientOffset;\\n/**\\n * Determines the x,y offset between the client offset and the initial client offset\\n *\\n * @param state The offset state to compute from\\n */\\nfunction getDifferenceFromInitialOffset(state) {\\n    var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset;\\n    if (!clientOffset || !initialClientOffset) {\\n        return null;\\n    }\\n    return subtract(clientOffset, initialClientOffset);\\n}\\nexports.getDifferenceFromInitialOffset = getDifferenceFromInitialOffset;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"add\",\"a\",\"b\",\"x\",\"y\",\"subtract\",\"Object\",\"defineProperty\",\"value\",\"getSourceClientOffset\",\"state\",\"clientOffset\",\"initialClientOffset\",\"initialSourceClientOffset\",\"getDifferenceFromInitialOffset\"]\n}\n"]