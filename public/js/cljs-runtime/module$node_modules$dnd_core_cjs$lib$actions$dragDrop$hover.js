shadow$provide.module$node_modules$dnd_core_cjs$lib$actions$dragDrop$hover=function(global,require,module,exports){function hoverAllTargets(targetIds,monitor,registry){targetIds.forEach(function(targetId){registry.getTarget(targetId).hover(monitor,targetId)})}global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=global(require("module$node_modules$invariant$browser")),matchesType_1=global(require("module$node_modules$dnd_core_cjs$lib$utils$matchesType")),
types_1=require("module$node_modules$dnd_core_cjs$lib$actions$dragDrop$types");exports.default=function(manager){return function(targetIdsArg,_a){_a=(void 0===_a?{}:_a).clientOffset;invariant_1.default(Array.isArray(targetIdsArg),"Expected targetIds to be an array.");targetIdsArg=targetIdsArg.slice(0);var monitor=manager.getMonitor(),registry=manager.getRegistry();invariant_1.default(monitor.isDragging(),"Cannot call hover while not dragging.");invariant_1.default(!monitor.didDrop(),"Cannot call hover after drop.");
for(var i=0;i<targetIdsArg.length;i++){var targetId=targetIdsArg[i];invariant_1.default(targetIdsArg.lastIndexOf(targetId)===i,"Expected targetIds to be unique in the passed array.");targetId=registry.getTarget(targetId);invariant_1.default(targetId,"Expected targetIds to be registered.")}i=monitor.getItemType();for(targetId=targetIdsArg.length-1;0<=targetId;targetId--){var targetType=registry.getTargetType(targetIdsArg[targetId]);matchesType_1.default(targetType,i)||targetIdsArg.splice(targetId,
1)}hoverAllTargets(targetIdsArg,monitor,registry);return{type:types_1.HOVER,payload:{targetIds:targetIdsArg,clientOffset:_a||null}}}}}
//# sourceMappingURL=module$node_modules$dnd_core_cjs$lib$actions$dragDrop$hover.js.map
