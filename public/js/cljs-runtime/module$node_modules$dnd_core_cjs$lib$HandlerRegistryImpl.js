shadow$provide.module$node_modules$dnd_core_cjs$lib$HandlerRegistryImpl=function(global,require,module,exports){function parseRoleFromHandlerId(handlerId){switch(handlerId[0]){case "S":return interfaces_1.HandlerRole.SOURCE;case "T":return interfaces_1.HandlerRole.TARGET;default:invariant_1.default(!1,"Cannot parse handler ID: "+handlerId)}}function mapContainsValue(map,searchValue){map=map.entries();do{var isDone=map.next();if(isDone.value[1]===searchValue)return!0;isDone=!!isDone.done}while(!isDone);
return!1}global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});var asap_1=global(require("module$node_modules$asap$browser_asap")),invariant_1=global(require("module$node_modules$invariant$browser")),registry_1=require("module$node_modules$dnd_core_cjs$lib$actions$registry"),getNextUniqueId_1=global(require("module$node_modules$dnd_core_cjs$lib$utils$getNextUniqueId")),interfaces_1=require("module$node_modules$dnd_core_cjs$lib$interfaces"),
contracts_1=require("module$node_modules$dnd_core_cjs$lib$contracts");require=function(){function HandlerRegistryImpl(store){this.types=new Map;this.dragSources=new Map;this.dropTargets=new Map;this.pinnedSource=this.pinnedSourceId=null;this.store=store}HandlerRegistryImpl.prototype.addSource=function(type,source){contracts_1.validateType(type);contracts_1.validateSourceContract(source);type=this.addHandler(interfaces_1.HandlerRole.SOURCE,type,source);this.store.dispatch(registry_1.addSource(type));
return type};HandlerRegistryImpl.prototype.addTarget=function(type,target){contracts_1.validateType(type,!0);contracts_1.validateTargetContract(target);type=this.addHandler(interfaces_1.HandlerRole.TARGET,type,target);this.store.dispatch(registry_1.addTarget(type));return type};HandlerRegistryImpl.prototype.containsHandler=function(handler){return mapContainsValue(this.dragSources,handler)||mapContainsValue(this.dropTargets,handler)};HandlerRegistryImpl.prototype.getSource=function(sourceId,includePinned){void 0===
includePinned&&(includePinned=!1);invariant_1.default(this.isSourceId(sourceId),"Expected a valid source ID.");return includePinned&&sourceId===this.pinnedSourceId?this.pinnedSource:this.dragSources.get(sourceId)};HandlerRegistryImpl.prototype.getTarget=function(targetId){invariant_1.default(this.isTargetId(targetId),"Expected a valid target ID.");return this.dropTargets.get(targetId)};HandlerRegistryImpl.prototype.getSourceType=function(sourceId){invariant_1.default(this.isSourceId(sourceId),"Expected a valid source ID.");
return this.types.get(sourceId)};HandlerRegistryImpl.prototype.getTargetType=function(targetId){invariant_1.default(this.isTargetId(targetId),"Expected a valid target ID.");return this.types.get(targetId)};HandlerRegistryImpl.prototype.isSourceId=function(handlerId){return parseRoleFromHandlerId(handlerId)===interfaces_1.HandlerRole.SOURCE};HandlerRegistryImpl.prototype.isTargetId=function(handlerId){return parseRoleFromHandlerId(handlerId)===interfaces_1.HandlerRole.TARGET};HandlerRegistryImpl.prototype.removeSource=
function(sourceId){var _this=this;invariant_1.default(this.getSource(sourceId),"Expected an existing source.");this.store.dispatch(registry_1.removeSource(sourceId));asap_1.default(function(){_this.dragSources.delete(sourceId);_this.types.delete(sourceId)})};HandlerRegistryImpl.prototype.removeTarget=function(targetId){invariant_1.default(this.getTarget(targetId),"Expected an existing target.");this.store.dispatch(registry_1.removeTarget(targetId));this.dropTargets.delete(targetId);this.types.delete(targetId)};
HandlerRegistryImpl.prototype.pinSource=function(sourceId){var source=this.getSource(sourceId);invariant_1.default(source,"Expected an existing source.");this.pinnedSourceId=sourceId;this.pinnedSource=source};HandlerRegistryImpl.prototype.unpinSource=function(){invariant_1.default(this.pinnedSource,"No source is pinned at the time.");this.pinnedSource=this.pinnedSourceId=null};HandlerRegistryImpl.prototype.addHandler=function(role,type,handler){a:{var id=getNextUniqueId_1.default().toString();switch(role){case interfaces_1.HandlerRole.SOURCE:id=
"S"+id;break a;case interfaces_1.HandlerRole.TARGET:id="T"+id;break a;default:throw Error("Unknown Handler Role: "+role);}}this.types.set(id,type);role===interfaces_1.HandlerRole.SOURCE?this.dragSources.set(id,handler):role===interfaces_1.HandlerRole.TARGET&&this.dropTargets.set(id,handler);return id};return HandlerRegistryImpl}();exports.default=require}
//# sourceMappingURL=module$node_modules$dnd_core_cjs$lib$HandlerRegistryImpl.js.map
