shadow$provide.module$node_modules$dnd_core_cjs$lib$actions$dragDrop$drop=function(global,require,module,exports){function verifyInvariants(monitor){invariant_1.default(monitor.isDragging(),"Cannot call drop while not dragging.");invariant_1.default(!monitor.didDrop(),"Cannot call drop twice during one drag operation.")}function getDroppableTargets(monitor){monitor=monitor.getTargetIds().filter(monitor.canDropOnTarget,monitor);monitor.reverse();return monitor}var __assign=this&&this.__assign||function(){__assign=
Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=global(require("module$node_modules$invariant$browser")),types_1=require("module$node_modules$dnd_core_cjs$lib$actions$dragDrop$types"),
js_utils_1=require("module$node_modules$dnd_core_cjs$lib$utils$js_utils");exports.default=function(manager){return function(options){void 0===options&&(options={});var monitor=manager.getMonitor(),registry=manager.getRegistry();verifyInvariants(monitor);getDroppableTargets(monitor).forEach(function(targetId,index){var target=registry.getTarget(targetId);targetId=target?target.drop(monitor,targetId):void 0;invariant_1.default("undefined"===typeof targetId||js_utils_1.isObject(targetId),"Drop result must either be an object or undefined.");
"undefined"===typeof targetId&&(targetId=0===index?{}:monitor.getDropResult());index=targetId;index={type:types_1.DROP,payload:{dropResult:__assign(__assign({},options),index)}};manager.dispatch(index)})}}}
//# sourceMappingURL=module$node_modules$dnd_core_cjs$lib$actions$dragDrop$drop.js.map
