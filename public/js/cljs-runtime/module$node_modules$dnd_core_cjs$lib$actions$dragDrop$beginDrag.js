shadow$provide.module$node_modules$dnd_core_cjs$lib$actions$dragDrop$beginDrag=function(global,require,module,exports){function verifyInvariants(sourceIds,monitor,registry){invariant_1.default(!monitor.isDragging(),"Cannot call beginDrag while dragging.");sourceIds.forEach(function(sourceId){invariant_1.default(registry.getSource(sourceId),"Expected sourceIds to be registered.")})}global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,
"__esModule",{value:!0});var invariant_1=global(require("module$node_modules$invariant$browser")),setClientOffset_1=require("module$node_modules$dnd_core_cjs$lib$actions$dragDrop$local$setClientOffset"),js_utils_1=require("module$node_modules$dnd_core_cjs$lib$utils$js_utils"),types_1=require("module$node_modules$dnd_core_cjs$lib$actions$dragDrop$types"),ResetCoordinatesAction={type:types_1.INIT_COORDS,payload:{clientOffset:null,sourceClientOffset:null}};exports.default=function(manager){return function(sourceIds,
options){void 0===sourceIds&&(sourceIds=[]);void 0===options&&(options={publishSource:!0});var _a=options.publishSource;_a=void 0===_a?!0:_a;var clientOffset=options.clientOffset,getSourceClientOffset=options.getSourceClientOffset,monitor=manager.getMonitor();options=manager.getRegistry();manager.dispatch(setClientOffset_1.setClientOffset(clientOffset));verifyInvariants(sourceIds,monitor,options);for(var sourceId=null,i=sourceIds.length-1;0<=i;i--)if(monitor.canDragSource(sourceIds[i])){sourceId=
sourceIds[i];break}sourceIds=sourceId;if(null===sourceIds)manager.dispatch(ResetCoordinatesAction);else return sourceId=null,clientOffset&&(invariant_1.default("function"===typeof getSourceClientOffset,"When clientOffset is provided, getSourceClientOffset must be a function."),sourceId=getSourceClientOffset(sourceIds)),manager.dispatch(setClientOffset_1.setClientOffset(clientOffset,sourceId)),getSourceClientOffset=options.getSource(sourceIds).beginDrag(monitor,sourceIds),invariant_1.default(js_utils_1.isObject(getSourceClientOffset),
"Item must be an object."),options.pinSource(sourceIds),options=options.getSourceType(sourceIds),{type:types_1.BEGIN_DRAG,payload:{itemType:options,item:getSourceClientOffset,sourceId:sourceIds,clientOffset:clientOffset||null,sourceClientOffset:sourceId||null,isSourcePublic:!!_a}}}}}
//# sourceMappingURL=module$node_modules$dnd_core_cjs$lib$actions$dragDrop$beginDrag.js.map
