{"version":3,"sources":["hx/hooks.cljs"],"mappings":"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","names":["var_args","G__26849","hx.hooks/useState","js/Error","initial","vec__26851","cljs.core.nth","v","u","js/module$node_modules$react$index.useState","updater","js/module$node_modules$react$index.useCallback","x","f","xs","hx$hooks$updater","cljs.core.apply","eq?","vec__26855","cljs.core/ifn?","G__26858","current-state","new-state","hx.hooks/useIRef","sentinel","js/module$node_modules$react$index.useRef","js/module$node_modules$react$index.useMemo","x26862","cljs.core/PROTOCOL_SENTINEL","this","goog.object/set","G__26863","a","G__26864","G__26865","b","G__26866","G__26867","G__26868","G__26870","hx.hooks/useReducer","reducer","init-state","hx.hooks.useReducer","js/undefined","init","js/module$node_modules$react$index.useReducer","cljs.core/fn?","state","action","hx.hooks/useValue","-x","x'","cljs.core._EQ_","js/module$node_modules$react$index.useEffect","hx.hooks/wrap-fx","G__26876","hx.hooks/useEffect","deps","cljs.core/to-array","hx.hooks/useContext","js/module$node_modules$react$index.useContext","hx.hooks/useMemo","G__26878","hx.hooks/useCallback","G__26886","hx.hooks/useImperativeHandle","ref","create-handle","js/module$node_modules$react$index.useImperativeHandle","G__26896","hx.hooks/useLayoutEffect","js/module$node_modules$react$index.useLayoutEffect","hx.hooks/useDebugValue","js/module$node_modules$react$index.useDebugValue","hx.hooks/<-state","hx.hooks/<-ref","hx.hooks/<-deref","vec__26902","cljs.core/deref","k","cljs.core.gensym","cljs.core/add-watch","_","v'","cljs.core.not_EQ_","G__26905","cljs.core/remove-watch","hx.hooks/<-effect","hx.hooks/<-reducer","hx.hooks/<-value","hx.hooks/<-context","hx.hooks/<-memo","hx.hooks/<-callback","hx.hooks/<-imperative-handle","hx.hooks/<-debug-value","hx.hooks/<-layout-effect"],"sourcesContent":["(ns hx.hooks\n  (:require [\"react\" :as react]\n            [goog.object :as gobj]))\n\n(defn useState\n  \"Like `React.useState`, but the update function returned can be used similar\n  to `swap!`.\n\n  Example:\n  ```\n  (let [[state set-state] (useState {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```\n\n  If `eq?` is passed in, will use that function to determine whether to update\n  the React state. If it returns `true`, it will keep the old state, `false` it\n  will render with new state.\"\n  ([initial]\n   (let [[v u] (react/useState initial)\n         updater (react/useCallback (fn updater\n                                      ([x] (u x))\n                                      ([f & xs]\n                                       (updater (fn spread-updater [x]\n                                                  (apply f x xs)))))\n                                    #js [u])]\n     [v updater]))\n  ([initial eq?]\n   (let [[v u] (react/useState initial)\n         updater (react/useCallback (fn updater\n                             ([x]\n                              ;; if x is not a fn, then it's likely not derived from previous state\n                              ;; so we don't bother checking equality\n                              (if-not (ifn? x)\n                                (u x)\n\n                                ;; When it is a function, new state will probably be derived from\n                                ;; previous. We can take advantage of structural sharing to do fast\n                                ;; equality here and avoid unnecessary re-renders\n                                (u (fn update [current-state]\n                                     (let [new-state (x current-state)]\n                                       (if (eq? current-state new-state)\n                                         ;; if equal, return the old one to preserve ref equality\n                                         ;; for React\n                                         current-state\n                                         new-state))))))\n                             ;; Support `(updater f a b c)`\n                             ([f & xs]\n                              (updater (fn spread-updater [x]\n                                         (apply f x xs)))))\n                           #js [u])]\n     [v updater])))\n\n(defn useIRef\n  \"Takes an initial value. Returns an atom that will _NOT_ re-render component\n  on change.\"\n  [initial]\n  (let [sentinel (react/useRef #js {})]\n    (react/useMemo\n     (fn []\n       (specify! #js {:current initial}\n         IDeref\n         (-deref [this]\n           (.-current ^js this))\n\n         IReset\n         (-reset! [this v]\n           (gobj/set this \"current\" v))\n\n         ISwap\n         (-swap!\n           ([this f]\n            (gobj/set this \"current\" (f (.-current ^js this))))\n           ([this f a]\n            (gobj/set this \"current\" (f (.-current ^js this) a)))\n           ([this f a b]\n            (gobj/set this \"current\" (f (.-current ^js this) a b)))\n           ([this f a b xs]\n            (gobj/set this \"current\" (apply f (.-current ^js this) a b xs))))))\n     #js [sentinel])))\n\n\n(defn useReducer \"Just react/useReducer.\"\n  ([reducer init-state]\n   (useReducer reducer init-state js/undefined))\n  ([reducer init-state init]\n   (react/useReducer\n    ;; handle ifn, e.g. multi-methods\n    (react/useMemo\n     #(if (and (not (fn? reducer)) (ifn? reducer))\n        (fn wrap-ifn [state action]\n          (reducer state action))\n        reducer)\n     #js [reducer])\n    init-state\n    init)))\n\n;; React uses JS equality to check of the current deps are different than\n;; previous deps values. This means that Clojure data (e.g. maps, sets, vecs)\n;; equality is not respected and will trigger if you e.g. pass in a vec of\n;; strings as props and need to depend on that inside of an effect.\n;;\n;; We can work around this by assigning the previous deps to a ref, and do\n;; our own equality check to see if they have changed. If so, we update the\n;; ref to equal the current value.\n;;\n;; We can then just pass this one value into e.g. `useEffect` and it will only\n;; change if Clojure's equality detects a difference.\n(defn useValue\n  \"Caches `x`. When a new `x` is passed in, returns new `x` only if it is\n  not structurally equal to the previous `x`.\n\n  Useful for optimizing `<-effect` et. al. when you have two values that might\n  be structurally equal by referentially different.\"\n  [x]\n  (let [-x (react/useRef x)]\n    ;; if they are equal, return the prev one to ensure ref equality\n    (let [x' (if (= x (.-current -x))\n               (.-current -x)\n               x)]\n      ;; Set the ref to be the last value that was succesfully used to render\n      (react/useEffect (fn []\n                         (set! (.-current -x) x)\n                         js/undefined)\n                       #js [x'])\n      x')))\n\n;; React `useEffect` expects either a function or undefined to be returned\n(defn- wrap-fx [f]\n  (fn wrap-fx-return []\n    (let [x (f)]\n      (if (fn? x)\n        x\n        js/undefined))))\n\n(defn useEffect\n  \"Just react/useEffect\"\n  ([f]\n   (react/useEffect (wrap-fx f)))\n  ([f deps]\n   (react/useEffect (wrap-fx f) (to-array deps))))\n\n(def useContext\n  \"Just react/useContext\"\n  react/useContext)\n\n(def useMemo\n  \"Just react/useMemo\"\n  react/useMemo)\n\n(defn useCallback\n  \"Just react/useCallback\"\n  ([f] (react/useCallback f))\n  ([f deps] (react/useCallback f (to-array deps))))\n\n(defn useImperativeHandle\n  \"Just react/useImperativeHandle\"\n  ([ref create-handle]\n   (react/useImperativeHandle ref create-handle))\n  ([ref create-handle deps]\n   (react/useImperativeHandle ref create-handle\n                              (to-array deps))))\n\n(defn useLayoutEffect\n  \"Just react/useLayoutEffect\"\n  ([f] (react/useLayoutEffect f))\n  ([f deps] (react/useLayoutEffect f (to-array deps))))\n\n\n(def useDebugValue\n  \"Just react/useDebugValue\"\n  react/useDebugValue)\n\n\n;;\n;; Deprecated\n;;\n\n(def ^{:deprecated \"Use useState\"} <-state useState)\n\n(def ^{:deprecated \"Use useIRef\"} <-ref useIRef)\n\n(defn ^{:deprecated \"Use useState\"} <-deref\n  \"Takes an atom. Returns the currently derefed value of the atom, and re-renders\n  the component on change.\"\n  ;; if no deps are passed in, we assume we only want to run\n  ;; subscrib/unsubscribe on mount/unmount\n  ([a]\n   ;; create a react/useState hook to track and trigger renders\n   (let [[v u] (react/useState @a)]\n     ;; react/useEffect hook to create and track the subscription to the iref\n     (react/useEffect\n      (fn []\n        (let [k (gensym \"<-deref\")]\n          (add-watch a k\n                     ;; update the react state on each change\n                     (fn [_ _ _ v'] (u v')))\n          ;; Check to ensure that a change has not occurred to the atom between\n          ;; the component rendering and running this effect.\n          ;; If it has updated, then update the state to the current value.\n          (when (not= @a v)\n            (u @a))\n          ;; return a function to tell react hook how to unsubscribe\n          #(remove-watch a k)))\n      ;; pass in deps vector as an array\n      ;; resubscribe if `a` changes\n      #js [a])\n     ;; return value of useState on each run\n     v)))\n\n(def ^{:deprecated \"Use useEffect\"} <-effect useEffect)\n\n(def ^{:deprecated \"Use useReducer\"} <-reducer\n  \"Just react/useReducer.\"\n  useReducer)\n\n(def ^{:deprecated \"Use useValue\"} <-value useValue)\n\n(def ^{:deprecated \"Use useContext\"} <-context\n  \"Just react/useContext\"\n  react/useContext)\n\n(def ^{:deprecated \"Use useMemo\"} <-memo\n  \"Just react/useMemo\"\n  react/useMemo)\n\n(def ^{:deprecated \"Use useCallback\"} <-callback useCallback)\n\n(def ^{:deprecated \"Use useImperativeHandle\"} <-imperative-handle useImperativeHandle)\n\n(def ^{:deprecated \"Use useDebugValue\"} <-debug-value\n  \"Just react/useDebugValue\"\n  react/useDebugValue)\n\n(def ^{:deprecated \"Use useLayoutEffect\"} <-layout-effect useLayoutEffect)\n"]}