{"version":3,"sources":["app/main.cljs"],"mappings":"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","names":["props__26811__auto__","maybe-ref__26812__auto__","vec__32266","hx.react/props->clj","hx.react/parse-body","goog/DEBUG","goog.object/set","app.main/Knight","vec__32269","map__32272","cljs.core.nth","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","isDragging","drag","js/module$node_modules$react_dnd_cjs$lib$index.useDrag","monitor","vec__32275","map__32278","app.main/Square","black","children","vec__32281","map__32284","app.main/BoardSquare","position","moveKnight","vec__32286","map__32289","isOver","drop","js/module$node_modules$react_dnd_cjs$lib$index.useDrop","cljs.core.prn","cljs.core/odd?","cljs.core/+","vec__32292","map__32295","app.main/renderPiece","knightPosition","cljs.core._EQ_","vec__32298","map__32301","app.main/renderSquare","i","x","cljs.core/rem","y","js/Math.floor","vec__32304","app.main/Board","state","js/module$node_modules$react_dnd_cjs$lib$index.DndProvider","goog.object/get","js/module$node_modules$react_dnd_html5_backend$dist$cjs$index","vec__32307","update-state","hx.hooks.useState","squares","iter__4529__auto__","s__32311","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__32313","cljs.core/chunk-buffer","i__32312","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32310","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","G__32314","G__32315","cljs.core.assoc","app.main/on-reload","js/module$node_modules$react_dom$index.render","hx.react/f","js/document","app.main/init","cljs.core/chunk-first"],"sourcesContent":["(ns app.main\n  (:require\n    [goog.dom :as gdom]\n    [goog.object :as gobj]\n    #_[reagent.core :as r]\n    [hx.react :as hx :refer [defnc]]\n    [hx.hooks :as hooks]\n    [react-dom :as react-dom]\n    [\"react-dnd-cjs\" :as dnd]\n    [\"react-dnd-html5-backend\" :as html5-backend]))\n\n(comment\n  (def players [:WHITE :BLACK])\n\n  (prn html5-backend/createBackend)\n\n  (defnc\n    Field\n    [{:keys [k\n             piece-on-field\n             on-click]\n      :as   state}]\n    (let [[collectedProps, drag] (dnd/useDrag #js {:item    #js {:id   (str k)\n                                                                 :type \"field\"}\n                                                   :collect (fn [monitor]\n                                                              #js {:isDragging (.isDragging monitor)})})\n          [collectedPropsFromDrop, dragFromDrop] (dnd/useDrop #js {:accept \"field\"})]\n      #_(prn collectedProps)\n      #_(prn drag)\n      (prn collectedProps)\n      [:div {:class    \"field\"\n             :key      k\n             :on-click on-click}\n       [:div {:class [\"piece\" (case piece-on-field\n                                :BLACK \"blackPiece\"\n                                :WHITE \"whitePiece\"\n                                :_____ nil)]}]]))\n\n  (defn put-piece [index {:keys [current-player] :as state}]\n    (-> state\n        (update :board #(assoc % index current-player))\n        (update-in [:players current-player :unplayed-pieces] dec)\n        (update :current-player (fn [player]\n                                  (case player\n                                    :BLACK :WHITE\n                                    :WHITE :BLACK)))))\n\n  (js/console.log dnd/DndProvider)\n  (prn dnd/DndProvider)\n\n\n  (defnc\n    MyBoard\n    [state]\n    (let [[state update-state] (hooks/useState state)]\n      [dnd/DndProvider\n       {:backend (gobj/get html5-backend \"default\")}\n       [:div\n        [:div (str \"Current player: \" (-> state :current-player))]\n        [:div (str \"Black pieces left: \" (-> state :players :BLACK :unplayed-pieces))]\n        [:div (str \"White pieces left: \" (-> state :players :WHITE :unplayed-pieces))]\n        [:div {:class \"gameBoard\"}\n         (->> (range 16)\n              (map (fn [i]\n                     [Field {:k              i\n                             :piece-on-field (-> state :board (get i))\n                             :on-click       #(update-state (put-piece i state))}]))\n              doall)]]]))\n\n  (defnc\n    MyComponent\n    [state]\n    [MyBoard state])\n\n  (defn ^:after-load on-reload []\n    (react-dom/render\n      ;; hx/f transforms Hiccup into a React element.\n      ;; We only have to use it when we want to use hiccup outside of `defnc` / `defcomponent`\n      (hx/f [MyComponent {:board          [:_____ :_____ :_____ :_____\n                                           :_____ :_____ :_____ :_____\n                                           :_____ :_____ :_____ :_____\n                                           :_____ :_____ :_____ :_____]\n                          :current-player (rand-nth players)\n                          :players        {:BLACK {:unplayed-pieces 5}\n                                           :WHITE {:unplayed-pieces 5}}}])\n      (. js/document getElementById \"app\"))))\n\n\n(defnc\n  Knight []\n  (let [[{:keys [isDragging]}, drag] (dnd/useDrag #js {:item    #js {:type \"knight\"}\n                                                       :collect (fn [monitor]\n                                                                  #js {:isDragging (monitor.isDragging)})})]\n    [:div\n     {:ref   drag\n      :style {:opacity     (if isDragging\n                             0.5\n                             1)\n              :font-size   50\n              :font-weight \"bold\"\n              :cursor      \"move\"}}\n     \"\u2658\"]))\n\n(defnc\n  Square [{:keys [black\n                  children]}]\n  [:div {:style {:width            \"100%\"\n                 :height           \"100%\"\n                 :background-color (if black\n                                     \"black\"\n                                     \"white\")\n                 :color            (if black\n                                     \"white\"\n                                     \"black\")}}\n   children])\n\n(defnc\n  BoardSquare\n  [{:keys [position\n           moveKnight\n           children]}]\n  (let [[{:keys [isOver]} drop] (dnd/useDrop #js {:accept  \"knight\"\n                                                  :drop    (fn []\n                                                             (moveKnight position))\n                                                  :collect (fn [monitor]\n                                                             (when (monitor.isOver)\n                                                               (prn \"it's true!\")) ;; always false for some reason\n                                                             #js {:isOver (monitor.isOver)})})\n        black (odd? (apply + position))]\n    [:div {:ref   drop\n           :style {:position \"relative\"\n                   :width    \"100%\"\n                   :height   \"100%\"}}\n     [Square {:black black}\n      children]\n     (when isOver\n       [:div {:style {:position         \"absolute\"\n                      :top              0\n                      :left             0\n                      :height           \"100%\"\n                      :width            \"100%\"\n                      :z-index          1\n                      :opacity          0.5\n                      :background-color \"yellow\"}}])]))\n\n(defnc\n  renderPiece [{:keys [position knightPosition]}]\n  (if (= position knightPosition)\n    [Knight]\n    [:span {:style {:visibility \"hidden\"}} \"empty\"]))\n\n(defnc\n  renderSquare [{:keys [moveKnight\n                        i\n                        knightPosition]}]\n  (let [x (rem i 8)\n        y (js/Math.floor (/ i 8))]\n    [:div {:key   i\n           :style {:width  \"12.5%\"\n                   :height \"12.5%\"}}\n     [BoardSquare {:position   [x y]\n                   :moveKnight moveKnight}\n      [renderPiece {:position       [x y]\n                    :knightPosition knightPosition}]]]))\n\n(defnc\n  Board [state]\n  [dnd/DndProvider\n   {:backend (gobj/get html5-backend \"default\")}\n   (let [[state, update-state] (hooks/useState state)]\n     (let [squares (for [i (range 64)]\n                     [renderSquare {:i              i\n                                    :knightPosition (:knightPosition state)\n                                    :moveKnight     (fn [position]\n                                                      (update-state (assoc state\n                                                                      :knightPosition position)))}])]\n       [:div {:style {:width          \"500px\"\n                      :height         \"500px\"\n                      :display        \"flex\"\n                      :flex-direction \"row\"\n                      :flex-wrap      \"wrap\"}}\n        squares]))])\n\n\n\n(defn ^:dev/after-load on-reload []\n  (react-dom/render\n    ;; hx/f transforms Hiccup into a React element.\n    ;; We only have to use it when we want to use hiccup outside of `defnc` / `defcomponent`\n    (hx/f [Board {:knightPosition [0 0]}])\n    (. js/document getElementById \"app\")))\n\n(defn ^:export init\n  []\n  (on-reload))"]}