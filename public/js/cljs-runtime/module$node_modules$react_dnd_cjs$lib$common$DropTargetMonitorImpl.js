shadow$provide.module$node_modules$react_dnd_cjs$lib$common$DropTargetMonitorImpl=function(global,require,module,exports){global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=global(require("module$node_modules$invariant$browser")),isCallingCanDrop=!1;require=function(){function DropTargetMonitorImpl(manager){this.targetId=null;this.internalMonitor=manager.getMonitor()}DropTargetMonitorImpl.prototype.receiveHandlerId=
function(targetId){this.targetId=targetId};DropTargetMonitorImpl.prototype.getHandlerId=function(){return this.targetId};DropTargetMonitorImpl.prototype.subscribeToStateChange=function(listener,options){return this.internalMonitor.subscribeToStateChange(listener,options)};DropTargetMonitorImpl.prototype.canDrop=function(){if(!this.targetId)return!1;invariant_1.default(!isCallingCanDrop,"You may not call monitor.canDrop() inside your canDrop() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor");
try{return isCallingCanDrop=!0,this.internalMonitor.canDropOnTarget(this.targetId)}finally{isCallingCanDrop=!1}};DropTargetMonitorImpl.prototype.isOver=function(options){return this.targetId?this.internalMonitor.isOverTarget(this.targetId,options):!1};DropTargetMonitorImpl.prototype.getItemType=function(){return this.internalMonitor.getItemType()};DropTargetMonitorImpl.prototype.getItem=function(){return this.internalMonitor.getItem()};DropTargetMonitorImpl.prototype.getDropResult=function(){return this.internalMonitor.getDropResult()};
DropTargetMonitorImpl.prototype.didDrop=function(){return this.internalMonitor.didDrop()};DropTargetMonitorImpl.prototype.getInitialClientOffset=function(){return this.internalMonitor.getInitialClientOffset()};DropTargetMonitorImpl.prototype.getInitialSourceClientOffset=function(){return this.internalMonitor.getInitialSourceClientOffset()};DropTargetMonitorImpl.prototype.getSourceClientOffset=function(){return this.internalMonitor.getSourceClientOffset()};DropTargetMonitorImpl.prototype.getClientOffset=
function(){return this.internalMonitor.getClientOffset()};DropTargetMonitorImpl.prototype.getDifferenceFromInitialOffset=function(){return this.internalMonitor.getDifferenceFromInitialOffset()};return DropTargetMonitorImpl}();exports.DropTargetMonitorImpl=require}
//# sourceMappingURL=module$node_modules$react_dnd_cjs$lib$common$DropTargetMonitorImpl.js.map
