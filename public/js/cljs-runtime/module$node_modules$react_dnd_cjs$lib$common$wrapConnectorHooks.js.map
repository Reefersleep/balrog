{
"version":3,
"file":"module$node_modules$react_dnd_cjs$lib$common$wrapConnectorHooks.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgB5HC,QAASA,2BAA0B,CAACC,IAAD,CAAO,CACtC,MAAO,SAAS,CAACC,aAAD,CAAgBC,OAAhB,CAAyB,CACf,IAAK,EAA3B,GAAID,aAAJ,GAAgCA,aAAhC,CAAgD,IAAhD,CACgB,KAAK,EAArB,GAAIC,OAAJ,GAA0BA,OAA1B,CAAoC,IAApC,CAEA,IAAI,CAACC,OAAAC,eAAA,CAAuBH,aAAvB,CAAL,CAKI,MAHAD,KAAA,CAAKK,aAAL,CAAWH,OAAX,CAGOG,CAAAA,aAlBf,IAA4B,QAA5B,GAAI,MAwBiCC,cAxB1BC,KAAX,CAIA,KAAUC,MAAJ,CAAU,0FAAV;EAoB+BF,aArBnBC,KAAAE,YACZ,EAoB+BH,aArBSC,KAAAG,KACxC,EAD6D,eAC7D,EACsC,6EADtC,EAAN,CAuBI,MAAOC,eAAAC,aAAA,CAA4BN,aAA5B,CADGJ,OAAAW,CAAU,QAAS,CAACR,IAAD,CAAO,CAAE,MAAOL,KAAA,CAAKK,IAAL,CAAWH,OAAX,CAAT,CAA1BW,CAA4Db,IAC/D,CAlB8B,CADH,CAd1Cc,MAAAC,eAAA,CAAsBjB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEkB,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIb,QAAUP,OAAA,CAAQ,iCAAR,CAAd,CACIe,eAAiBf,OAAA,CAAQ,0DAAR,CAiDrBE,QAAAmB,QAAA,CAfAC,QAA2B,CAACC,KAAD,CAAQ,CAC/B,IAAIC;AAAe,EACnBN,OAAAO,KAAA,CAAYF,KAAZ,CAAAG,QAAA,CAA2B,QAAS,CAACC,GAAD,CAAM,CACtC,IAAIvB,KAAOmB,KAAA,CAAMI,GAAN,CAEX,IAAIA,GAAAC,SAAA,CAAa,KAAb,CAAJ,CACIJ,YAAA,CAAaG,GAAb,CAAA,CAAoBJ,KAAA,CAAMI,GAAN,CADxB,KAGK,CACD,IAAIE,cAAgB1B,0BAAA,CAA2BC,IAA3B,CACpBoB,aAAA,CAAaG,GAAb,CAAA,CAAoB,QAAS,EAAG,CAAE,MAAOE,cAAT,CAF/B,CANiC,CAA1C,CAWA,OAAOL,aAbwB,CAtCyF;",
"sources":["node_modules/react-dnd-cjs/lib/common/wrapConnectorHooks.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_dnd_cjs$lib$common$wrapConnectorHooks\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar cloneWithRef_1 = require(\"../utils/cloneWithRef\");\nfunction throwIfCompositeComponentElement(element) {\n    // Custom components can no longer be wrapped directly in React DnD 2.0\n    // so that we don't need to depend on findDOMNode() from react-dom.\n    if (typeof element.type === 'string') {\n        return;\n    }\n    var displayName = element.type.displayName || element.type.name || 'the component';\n    throw new Error('Only native element nodes can now be passed to React DnD connectors.' +\n        (\"You can either wrap \" + displayName + \" into a <div>, or turn it into a \") +\n        'drag source or a drop target itself.');\n}\nfunction wrapHookToRecognizeElement(hook) {\n    return function (elementOrNode, options) {\n        if (elementOrNode === void 0) { elementOrNode = null; }\n        if (options === void 0) { options = null; }\n        // When passed a node, call the hook straight away.\n        if (!react_1.isValidElement(elementOrNode)) {\n            var node = elementOrNode;\n            hook(node, options);\n            // return the node so it can be chained (e.g. when within callback refs\n            // <div ref={node => connectDragSource(connectDropTarget(node))}/>\n            return node;\n        }\n        // If passed a ReactElement, clone it and attach this function as a ref.\n        // This helps us achieve a neat API where user doesn't even know that refs\n        // are being used under the hood.\n        var element = elementOrNode;\n        throwIfCompositeComponentElement(element);\n        // When no options are passed, use the hook directly\n        var ref = options ? function (node) { return hook(node, options); } : hook;\n        return cloneWithRef_1.cloneWithRef(element, ref);\n    };\n}\nfunction wrapConnectorHooks(hooks) {\n    var wrappedHooks = {};\n    Object.keys(hooks).forEach(function (key) {\n        var hook = hooks[key];\n        // ref objects should be passed straight through without wrapping\n        if (key.endsWith('Ref')) {\n            wrappedHooks[key] = hooks[key];\n        }\n        else {\n            var wrappedHook_1 = wrapHookToRecognizeElement(hook);\n            wrappedHooks[key] = function () { return wrappedHook_1; };\n        }\n    });\n    return wrappedHooks;\n}\nexports.default = wrapConnectorHooks;\n\n};"],
"names":["shadow$provide","global","require","module","exports","wrapHookToRecognizeElement","hook","elementOrNode","options","react_1","isValidElement","node","element","type","Error","displayName","name","cloneWithRef_1","cloneWithRef","ref","Object","defineProperty","value","default","wrapConnectorHooks","hooks","wrappedHooks","keys","forEach","key","endsWith","wrappedHook_1"]
}
