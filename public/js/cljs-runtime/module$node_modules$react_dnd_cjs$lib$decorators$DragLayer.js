shadow$provide.module$node_modules$react_dnd_cjs$lib$decorators$DragLayer=function(global,require,module,exports){var __extends=this&&this.__extends||function(){var extendStatics=function(d$jscomp$0,b$jscomp$0){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return extendStatics(d$jscomp$0,b$jscomp$0)};return function(d,b){function __(){this.constructor=d}extendStatics(d,b);d.prototype=
null===b?Object.create(b):(__.prototype=b.prototype,new __)}}(),__assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};global=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)Object.hasOwnProperty.call(mod,k)&&(result[k]=mod[k]);result["default"]=
mod;return result};module=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});var React=global(require("module$node_modules$react$index")),shallowequal_1=module(require("module$node_modules$shallowequal$index")),hoist_non_react_statics_1=module(require("module$node_modules$hoist_non_react_statics$dist$hoist_non_react_statics_cjs")),invariant_1=module(require("module$node_modules$invariant$browser")),index_1=
require("module$node_modules$react_dnd_cjs$lib$index"),js_utils_1=require("module$node_modules$react_dnd_cjs$lib$utils$js_utils"),utils_1=require("module$node_modules$react_dnd_cjs$lib$decorators$utils");exports.DragLayer=function(collect,options){void 0===options&&(options={});utils_1.checkDecoratorArguments("DragLayer","collect[, options]",collect,options);invariant_1.default("function"===typeof collect,'Expected "collect" provided as the first argument to DragLayer to be a function that collects props to inject into the component. ',
"Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer",collect);invariant_1.default(js_utils_1.isPlainObject(options),'Expected "options" provided as the second argument to DragLayer to be a plain object when specified. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer',options);return function(DecoratedComponent){var _a$jscomp$0=options.arePropsEqual,arePropsEqual=void 0===_a$jscomp$0?shallowequal_1.default:_a$jscomp$0,
displayName=DecoratedComponent.displayName||DecoratedComponent.name||"Component";_a$jscomp$0=function(_super){function DragLayerContainer(){var _this=null!==_super&&_super.apply(this,arguments)||this;_this.isCurrentlyMounted=!1;_this.ref=React.createRef();_this.handleChange=function(){if(_this.isCurrentlyMounted){var nextState=_this.getCurrentState();shallowequal_1.default(nextState,_this.state)||_this.setState(nextState)}};return _this}__extends(DragLayerContainer,_super);DragLayerContainer.prototype.getDecoratedComponentInstance=
function(){invariant_1.default(this.ref.current,"In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()");return this.ref.current};DragLayerContainer.prototype.shouldComponentUpdate=function(nextProps,nextState){return!arePropsEqual(nextProps,this.props)||!shallowequal_1.default(nextState,this.state)};DragLayerContainer.prototype.componentDidMount=function(){this.isCurrentlyMounted=!0;this.handleChange()};DragLayerContainer.prototype.componentWillUnmount=
function(){this.isCurrentlyMounted=!1;this.unsubscribeFromOffsetChange&&(this.unsubscribeFromOffsetChange(),this.unsubscribeFromOffsetChange=void 0);this.unsubscribeFromStateChange&&(this.unsubscribeFromStateChange(),this.unsubscribeFromStateChange=void 0)};DragLayerContainer.prototype.render=function(){var _this=this;return React.createElement(index_1.DndContext.Consumer,null,function(_a){_a=_a.dragDropManager;if(void 0===_a)return null;_this.receiveDragDropManager(_a);return _this.isCurrentlyMounted?
React.createElement(DecoratedComponent,__assign({},_this.props,_this.state,{ref:utils_1.isRefable(DecoratedComponent)?_this.ref:null})):null})};DragLayerContainer.prototype.receiveDragDropManager=function(dragDropManager){void 0===this.manager&&(this.manager=dragDropManager,invariant_1.default("object"===typeof dragDropManager,"Could not find the drag and drop manager in the context of %s. Make sure to render a DndProvider component in your top-level component. Read more: http://react-dnd.github.io/react-dnd/docs/troubleshooting#could-not-find-the-drag-and-drop-manager-in-the-context",
displayName,displayName),dragDropManager=this.manager.getMonitor(),this.unsubscribeFromOffsetChange=dragDropManager.subscribeToOffsetChange(this.handleChange),this.unsubscribeFromStateChange=dragDropManager.subscribeToStateChange(this.handleChange))};DragLayerContainer.prototype.getCurrentState=function(){if(!this.manager)return{};var monitor=this.manager.getMonitor();return collect(monitor,this.props)};DragLayerContainer.displayName="DragLayer("+displayName+")";DragLayerContainer.DecoratedComponent=
DecoratedComponent;return DragLayerContainer}(React.Component);return hoist_non_react_statics_1.default(_a$jscomp$0,DecoratedComponent)}}}
//# sourceMappingURL=module$node_modules$react_dnd_cjs$lib$decorators$DragLayer.js.map
