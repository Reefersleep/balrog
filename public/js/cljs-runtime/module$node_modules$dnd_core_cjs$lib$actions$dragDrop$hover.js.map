{
"version":3,
"file":"module$node_modules$dnd_core_cjs$lib$actions$dragDrop$hover.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuDxHC,QAASA,gBAAe,CAACC,SAAD,CAAYC,OAAZ,CAAqBC,QAArB,CAA+B,CAEnDF,SAAAG,QAAA,CAAkB,QAAS,CAACC,QAAD,CAAW,CACrBF,QAAAG,UAAAC,CAAmBF,QAAnBE,CACbC,MAAA,CAAaN,OAAb,CAAsBG,QAAtB,CAFkC,CAAtC,CAFmD,CArDnDI,MAAAA,CAAmB,IAAnBA,EAA2B,IAAAA,gBAA3BA,EAAoD,QAAS,CAACC,GAAD,CAAM,CACnE,MAAQA,IAAD,EAAQA,GAAAC,WAAR,CAA0BD,GAA1B,CAAgC,CAAE,UAAWA,GAAb,CAD4B,CAGvEE,OAAAC,eAAA,CAAsBd,OAAtB,CAA+B,YAA/B,CAA6C,CAAEe,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,YAAcN,MAAA,CAAgBZ,OAAA,CAAQ,uCAAR,CAAhB,CAAlB,CACImB,cAAgBP,MAAA,CAAgBZ,OAAA,CAAQ,wDAAR,CAAhB,CADpB;AAEIoB,QAAUpB,OAAA,CAAQ,6DAAR,CAqBdE,QAAAmB,QAAA,CApBAC,QAAoB,CAACC,OAAD,CAAU,CAC1B,MAAOZ,SAAc,CAACa,YAAD,CAAeC,EAAf,CAAmB,CAChCC,EAAAA,CAAeA,CAAQ,IAAK,EAAZ,GAAAD,EAAA,CAAgB,EAAhB,CAAqBA,EAAtBC,cAoBvBR,YAAAG,QAAA,CAAoBM,KAAAC,QAAA,CAnBOJ,YAmBP,CAApB,CAAiD,oCAAjD,CAlBQpB,aAAAA,CAAYoB,YAAAK,MAAA,CAAmB,CAAnB,CAChB,KAAIxB,QAAUkB,OAAAO,WAAA,EAAd,CACIxB,SAAWiB,OAAAQ,YAAA,EAmBnBb,YAAAG,QAAA,CAlB+BhB,OAkBX2B,WAAA,EAApB,CAA0C,uCAA1C,CACAd,YAAAG,QAAA,CAAoB,CAnBWhB,OAmBV4B,QAAA,EAArB,CAAwC,+BAAxC,CACA;IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CApBoB9B,YAoBA+B,OAApB,CAAsCD,CAAA,EAAtC,CAA2C,CACvC,IAAI1B,SArBYJ,YAqBD,CAAU8B,CAAV,CACfhB,YAAAG,QAAA,CAtBgBjB,YAsBIgC,YAAA,CAAsB5B,QAAtB,CAApB,GAAwD0B,CAAxD,CAA2D,sDAA3D,CACIxB,SAAAA,CAvBgCJ,QAuBvBG,UAAA,CAAmBD,QAAnB,CACbU,YAAAG,QAAA,CAAoBX,QAApB,CAA4B,sCAA5B,CAJuC,CAlBS2B,CAAAA,CAD1BhC,OAAAiC,YAAAD,EA8B1B,KAASH,QAAT,CA7B+B9B,YA6BlB+B,OAAb,CAAgC,CAAhC,CAAwC,CAAxC,EAAmCD,QAAnC,CAA2CA,QAAA,EAA3C,CAAgD,CAE5C,IAAIK,WA/BkCjC,QA+BrBkC,cAAA,CA/BUpC,YA8BZI,CAAU0B,QAAV1B,CACE,CACZW,cAAAE,QAAA,CAAsBkB,UAAtB,CAAkCF,CAAlC,CAAL,EAhC2BjC,YAiCvBqC,OAAA,CAAiBP,QAAjB;AAAoB,CAApB,CAJwC,CA5B5C/B,eAAA,CAAgBC,YAAhB,CAA2BC,OAA3B,CAAoCC,QAApC,CACA,OAAO,CACHoC,KAAMtB,OAAAuB,MADH,CAEHC,QAAS,CACLxC,UAAWA,YADN,CAELsB,aAAcA,EAAdA,EAA8B,IAFzB,CAFN,CAV6B,CADd,CAT0F;",
"sources":["node_modules/dnd-core-cjs/lib/actions/dragDrop/hover.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dnd_core_cjs$lib$actions$dragDrop$hover\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = __importDefault(require(\"invariant\"));\nvar matchesType_1 = __importDefault(require(\"../../utils/matchesType\"));\nvar types_1 = require(\"./types\");\nfunction createHover(manager) {\n    return function hover(targetIdsArg, _a) {\n        var clientOffset = (_a === void 0 ? {} : _a).clientOffset;\n        verifyTargetIdsIsArray(targetIdsArg);\n        var targetIds = targetIdsArg.slice(0);\n        var monitor = manager.getMonitor();\n        var registry = manager.getRegistry();\n        checkInvariants(targetIds, monitor, registry);\n        var draggedItemType = monitor.getItemType();\n        removeNonMatchingTargetIds(targetIds, registry, draggedItemType);\n        hoverAllTargets(targetIds, monitor, registry);\n        return {\n            type: types_1.HOVER,\n            payload: {\n                targetIds: targetIds,\n                clientOffset: clientOffset || null,\n            },\n        };\n    };\n}\nexports.default = createHover;\nfunction verifyTargetIdsIsArray(targetIdsArg) {\n    invariant_1.default(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');\n}\nfunction checkInvariants(targetIds, monitor, registry) {\n    invariant_1.default(monitor.isDragging(), 'Cannot call hover while not dragging.');\n    invariant_1.default(!monitor.didDrop(), 'Cannot call hover after drop.');\n    for (var i = 0; i < targetIds.length; i++) {\n        var targetId = targetIds[i];\n        invariant_1.default(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');\n        var target = registry.getTarget(targetId);\n        invariant_1.default(target, 'Expected targetIds to be registered.');\n    }\n}\nfunction removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {\n    // Remove those targetIds that don't match the targetType.  This\n    // fixes shallow isOver which would only be non-shallow because of\n    // non-matching targets.\n    for (var i = targetIds.length - 1; i >= 0; i--) {\n        var targetId = targetIds[i];\n        var targetType = registry.getTargetType(targetId);\n        if (!matchesType_1.default(targetType, draggedItemType)) {\n            targetIds.splice(i, 1);\n        }\n    }\n}\nfunction hoverAllTargets(targetIds, monitor, registry) {\n    // Finally call hover on all matching targets.\n    targetIds.forEach(function (targetId) {\n        var target = registry.getTarget(targetId);\n        target.hover(monitor, targetId);\n    });\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","hoverAllTargets","targetIds","monitor","registry","forEach","targetId","getTarget","target","hover","__importDefault","mod","__esModule","Object","defineProperty","value","invariant_1","matchesType_1","types_1","default","createHover","manager","targetIdsArg","_a","clientOffset","Array","isArray","slice","getMonitor","getRegistry","isDragging","didDrop","i","length","lastIndexOf","draggedItemType","getItemType","targetType","getTargetType","splice","type","HOVER","payload"]
}
