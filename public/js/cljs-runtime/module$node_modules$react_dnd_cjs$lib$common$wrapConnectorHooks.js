shadow$provide.module$node_modules$react_dnd_cjs$lib$common$wrapConnectorHooks=function(global,require,module,exports){function wrapHookToRecognizeElement(hook){return function(elementOrNode,options){void 0===elementOrNode&&(elementOrNode=null);void 0===options&&(options=null);if(!react_1.isValidElement(elementOrNode))return hook(elementOrNode,options),elementOrNode;if("string"!==typeof elementOrNode.type)throw Error("Only native element nodes can now be passed to React DnD connectors.You can either wrap "+
((elementOrNode.type.displayName||elementOrNode.type.name||"the component")+" into a \x3cdiv\x3e, or turn it into a drag source or a drop target itself."));return cloneWithRef_1.cloneWithRef(elementOrNode,options?function(node){return hook(node,options)}:hook)}}Object.defineProperty(exports,"__esModule",{value:!0});var react_1=require("module$node_modules$react$index"),cloneWithRef_1=require("module$node_modules$react_dnd_cjs$lib$utils$cloneWithRef");exports.default=function(hooks){var wrappedHooks=
{};Object.keys(hooks).forEach(function(key){var hook=hooks[key];if(key.endsWith("Ref"))wrappedHooks[key]=hooks[key];else{var wrappedHook_1=wrapHookToRecognizeElement(hook);wrappedHooks[key]=function(){return wrappedHook_1}}});return wrappedHooks}}
//# sourceMappingURL=module$node_modules$react_dnd_cjs$lib$common$wrapConnectorHooks.js.map
